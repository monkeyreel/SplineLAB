"""
GUI-–º–æ–¥—É–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, —Å–ø–æ—Å–æ–± —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É–∑–ª–æ–≤, 
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç 
—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∏ –æ—à–∏–±–∫–∏ –≤ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –æ–∫–Ω–µ.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã:
- –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –õ–∞–≥—Ä–∞–Ω–∂–∞
- –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ù—å—é—Ç–æ–Ω–∞
- –ö—É–±–∏—á–µ—Å–∫–∞—è —Å–ø–ª–∞–π–Ω-–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- tkinter: –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è GUI
- matplotlib: –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
- numpy: –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
- functions, nodes, interpolation, calculate_error: –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
"""

import tkinter as tk
from tkinter import ttk
from itertools import cycle
import matplotlib.pyplot as plt
import numpy as np

from functions import *            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
from nodes import *               # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∑–ª–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
from interpolation import *       # –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
from calculate_error import *     # –û—Ü–µ–Ω–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏

def run_gui():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏.

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç:
        - –≤—ã–±—Ä–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏;
        - –∑–∞–¥–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ;
        - –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏;
        - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏;
        - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ MSE).
    """

    def run_comparison():
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏:
            - —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª–∏–Ω–æ–º–æ–≤;
            - –≤—ã–≤–æ–¥–∏—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –æ—à–∏–±–æ–∫;
            - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≤ ./img/plot.png;
            - –ø–µ—á–∞—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å.
        """
        f = get_function(function_var.get())  # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
        a, b = -1, 1                           # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        n = int(entry_nodes.get())            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤

        x_nodes = generate_nodes(a, b, n, nodes_var.get())
        y_nodes = f(x_nodes)
        x_plot = np.linspace(a, b, 1000)

        # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        methods = {
            "–õ–∞–≥—Ä–∞–Ω–∂": lagrange_interpolation,
            "–ù—å—é—Ç–æ–Ω": newton_interpolation,
            "–ö—É–±–∏—á–µ—Å–∫–∏–π —Å–ø–ª–∞–π–Ω": cubic_spline_interpolation
        }

        colors = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.figure(figsize=(12, 6))

        # –ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        plt.subplot(1, 2, 1)
        plt.plot(x_plot, f(x_plot), label="f(x)", linewidth=2)

        # –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫
        plt.subplot(1, 2, 2)
        errors = {}

        for name, var in method_vars.items():
            if var.get():
                p = methods[name](x_nodes, y_nodes)
                color = next(colors)

                # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –∫—Ä–∏–≤–∞—è
                plt.subplot(1, 2, 1)
                plt.plot(x_plot, p(x_plot), '--', label=name, color=color)

                # –û—à–∏–±–∫–∞
                plt.subplot(1, 2, 2)
                plt.plot(x_plot, np.abs(f(x_plot) - p(x_plot)), label=name, color=color)

                # –†–∞—Å—á—ë—Ç –æ—à–∏–±–æ–∫
                max_err = calculate_max_error(f, p, x_plot)
                mse = calculate_mse(f, p, x_plot)
                errors[name] = (max_err, mse)

        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.subplot(1, 2, 1)
        plt.title("–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏")
        plt.legend()
        plt.grid()

        plt.subplot(1, 2, 2)
        plt.title("–û—à–∏–±–∫–∏ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏")
        plt.legend()
        plt.grid()

        plt.tight_layout()
        plt.savefig('./img/plot.png')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª

        # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
        print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫:")
        for method, (max_err, mse) in errors.items():
            print(f"{method}: Max Error = {max_err:.4e}, MSE = {mse:.4e}")

    # --- GUI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
    root = tk.Tk()
    root.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏")

    # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
    ttk.Label(root, text="–§—É–Ω–∫—Ü–∏—è:").grid(row=0, column=0)
    global function_var
    function_var = tk.StringVar(value="sin(x)")
    ttk.Combobox(root, textvariable=function_var, values=[
        "sin(x)", "1 / (1 + 25x^2)", "|x|", "exp(x)"]).grid(row=0, column=1)

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É–∑–ª–æ–≤
    ttk.Label(root, text="–£–∑–ª—ã:").grid(row=1, column=0)
    global nodes_var
    nodes_var = tk.StringVar(value="–†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ")
    ttk.Combobox(root, textvariable=nodes_var, values=[
        "–†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ", "–ß–µ–±—ã—à—ë–≤—Å–∫–∏–µ"]).grid(row=1, column=1)

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤
    ttk.Label(root, text="–ö–æ–ª-–≤–æ —É–∑–ª–æ–≤:").grid(row=2, column=0)
    global entry_nodes
    entry_nodes = ttk.Entry(root)
    entry_nodes.insert(0, "10")
    entry_nodes.grid(row=2, column=1)

    # –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    ttk.Label(root, text="–ú–µ—Ç–æ–¥—ã:").grid(row=3, column=0)
    global method_vars
    method_vars = {
        "–õ–∞–≥—Ä–∞–Ω–∂": tk.BooleanVar(value=True),
        "–ù—å—é—Ç–æ–Ω": tk.BooleanVar(value=True),
        "–ö—É–±–∏—á–µ—Å–∫–∏–π —Å–ø–ª–∞–π–Ω": tk.BooleanVar(value=True),
    }
    for i, (name, var) in enumerate(method_vars.items()):
        ttk.Checkbutton(root, text=name, variable=var).grid(row=3 + i, column=1, sticky="w")

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ttk.Button(root, text="–°—Ä–∞–≤–Ω–∏—Ç—å", command=run_comparison).grid(row=6, column=0, columnspan=2, pady=10)

    root.mainloop()
